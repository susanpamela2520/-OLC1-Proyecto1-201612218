// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/STAT_analisis/Statlexico.jflex


//------------  Paquete e importaciones ------------
package STAT_analisis; 

import java_cup.runtime.*;
import java.util.LinkedList;
 

/*------------------ 2da Area: Opciiones y Declaraciones ------------------*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\50\1\61"+
    "\1\62\1\63\1\0\1\50\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\50\1\64"+
    "\1\65\1\66\7\0\1\3\252\0\2\67\115\0\1\70"+
    "\u01a8\0\2\3\u0100\0\1\71\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\16\22\1\23\1\24\1\25"+
    "\1\1\1\26\2\1\1\27\2\0\1\30\2\0\1\31"+
    "\3\0\1\32\1\33\1\34\6\22\1\35\5\22\1\36"+
    "\7\22\1\0\3\22\1\37\1\36\3\0\2\40\1\41"+
    "\2\0\1\42\1\43\3\22\1\0\6\22\1\0\1\22"+
    "\1\44\1\22\1\45\1\22\1\0\3\22\1\0\2\22"+
    "\1\0\1\22\1\46\1\22\1\0\1\22\1\0\1\45"+
    "\3\0\1\47\1\22\2\50\1\51\1\22\1\0\2\22"+
    "\1\0\1\22\1\52\2\53\1\22\1\0\1\22\2\54"+
    "\2\22\1\0\1\22\1\0\1\22\1\55\1\0\1\22"+
    "\2\56\1\22\1\0\2\57\1\22\1\0\2\22\1\0"+
    "\1\22\2\60\1\22\1\0\2\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\2\61\1\22\1\0\2\22\1\0"+
    "\1\62\1\22\1\0\1\22\2\63\2\64\2\65\2\22"+
    "\1\0\1\66\1\22\1\0\1\22\1\0\1\22\1\67"+
    "\1\70\1\67\1\70\2\71\1\0\1\22\1\0\2\22"+
    "\2\0\1\72\1\0\1\22\1\0\2\22\3\0\1\22"+
    "\1\0\1\22\2\73\2\0\1\22\1\0\1\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\74\1\22\1\0\2\75"+
    "\1\22\1\0\2\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\72\0\350\0\u0122"+
    "\0\72\0\72\0\72\0\u015c\0\72\0\72\0\u0196\0\u01d0"+
    "\0\72\0\72\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\72\0\72\0\72\0\u05e4\0\72"+
    "\0\u061e\0\u0658\0\72\0\u0692\0\u06cc\0\72\0\u0706\0\u0740"+
    "\0\72\0\u077a\0\u07b4\0\u07ee\0\72\0\72\0\72\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u02b8\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\72"+
    "\0\72\0\u0d5e\0\u0d98\0\u0dd2\0\72\0\u0692\0\u0740\0\u0e0c"+
    "\0\u0e46\0\72\0\u07ee\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u02b8"+
    "\0\u1138\0\u02b8\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u02b8\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\72\0\u149e\0\u14d8\0\u1512\0\u02b8\0\u154c\0\u02b8"+
    "\0\72\0\u02b8\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u02b8\0\u02b8\0\72\0\u16e2\0\u171c\0\u1756\0\u02b8\0\72"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u02b8\0\u18ec"+
    "\0\u1926\0\u02b8\0\72\0\u1960\0\u199a\0\u02b8\0\72\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u02b8\0\72\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u02b8\0\72\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u02b8\0\u1e96\0\u1ed0\0\u1f0a\0\u02b8\0\72\0\u02b8\0\72"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u02b8\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u02b8\0\u02b8\0\72\0\72\0\u02b8"+
    "\0\72\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u02b8\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u02b8\0\72\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\72\0\u281a\0\u2854\0\u02b8\0\72\0\u288e\0\u28c8"+
    "\0\u02b8\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\26\1\35"+
    "\3\26\1\36\1\37\4\26\1\40\1\41\1\26\1\42"+
    "\1\43\2\26\1\44\1\2\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\2\120\0\1\53\43\0\6\54\1\0"+
    "\53\54\1\55\7\54\10\0\1\56\61\0\11\57\1\60"+
    "\60\57\15\0\1\61\70\0\1\62\4\0\1\63\70\0"+
    "\1\64\1\0\1\20\75\0\1\65\71\0\1\66\71\0"+
    "\1\67\65\0\1\26\5\0\31\26\33\0\1\26\5\0"+
    "\16\26\1\70\2\26\1\71\7\26\33\0\1\26\5\0"+
    "\1\72\6\26\1\73\6\26\1\74\12\26\33\0\1\26"+
    "\5\0\4\26\1\75\11\26\1\76\12\26\33\0\1\26"+
    "\5\0\11\26\1\77\1\26\1\100\15\26\33\0\1\26"+
    "\5\0\1\101\15\26\1\102\12\26\33\0\1\26\5\0"+
    "\21\26\1\103\7\26\33\0\1\26\5\0\5\26\1\104"+
    "\7\26\1\105\13\26\33\0\1\26\5\0\1\106\30\26"+
    "\33\0\1\26\5\0\4\26\1\107\24\26\33\0\1\26"+
    "\5\0\23\26\1\110\2\26\1\111\2\26\33\0\1\26"+
    "\5\0\10\26\1\112\10\26\1\113\7\26\6\0\1\114"+
    "\24\0\1\26\5\0\1\115\15\26\1\116\12\26\33\0"+
    "\1\26\5\0\7\26\1\117\21\26\76\0\1\120\41\0"+
    "\1\121\7\0\1\122\77\0\1\123\2\0\1\124\13\0"+
    "\6\54\1\125\53\54\1\55\15\54\1\126\53\54\1\55"+
    "\7\54\11\57\1\127\60\57\62\0\1\130\7\0\14\62"+
    "\1\131\55\62\2\63\1\132\67\63\4\0\1\133\15\0"+
    "\1\133\42\0\1\133\26\0\1\26\5\0\16\26\1\134"+
    "\12\26\33\0\1\26\5\0\4\26\1\135\24\26\33\0"+
    "\1\26\5\0\22\26\1\136\6\26\7\0\1\137\23\0"+
    "\1\26\5\0\1\140\30\26\33\0\1\26\5\0\15\26"+
    "\1\141\13\26\33\0\1\26\5\0\5\26\1\142\23\26"+
    "\33\0\1\26\5\0\24\26\1\143\4\26\33\0\1\26"+
    "\5\0\4\26\1\144\24\26\33\0\1\26\5\0\22\26"+
    "\1\145\6\26\7\0\1\146\23\0\1\26\5\0\13\26"+
    "\1\147\15\26\33\0\1\26\5\0\21\26\1\150\7\26"+
    "\33\0\1\26\5\0\1\151\30\26\33\0\1\26\5\0"+
    "\23\26\1\152\5\26\33\0\1\26\5\0\10\26\1\153"+
    "\20\26\6\0\1\154\24\0\1\26\5\0\26\26\1\155"+
    "\2\26\33\0\1\26\5\0\21\26\1\156\7\26\33\0"+
    "\1\26\5\0\10\26\1\157\20\26\6\0\1\160\24\0"+
    "\1\26\5\0\23\26\1\161\5\26\33\0\1\26\5\0"+
    "\24\26\1\162\4\26\64\0\1\163\40\0\1\26\5\0"+
    "\13\26\1\164\5\26\1\165\7\26\33\0\1\26\5\0"+
    "\10\26\1\166\20\26\6\0\1\167\24\0\1\26\5\0"+
    "\10\26\1\170\20\26\6\0\1\171\55\0\1\172\67\0"+
    "\1\173\60\0\1\160\26\0\1\160\13\0\1\174\60\0"+
    "\14\62\1\175\4\62\1\132\50\62\22\0\1\26\5\0"+
    "\13\26\1\176\15\26\33\0\1\26\5\0\1\177\30\26"+
    "\33\0\1\26\5\0\4\26\1\200\24\26\45\0\1\201"+
    "\57\0\1\26\5\0\21\26\1\202\7\26\33\0\1\26"+
    "\5\0\22\26\1\203\6\26\7\0\1\204\23\0\1\26"+
    "\5\0\1\205\7\26\1\206\20\26\6\0\1\207\24\0"+
    "\1\26\5\0\1\26\1\210\27\26\33\0\1\26\5\0"+
    "\27\26\1\211\1\26\33\0\1\26\5\0\4\26\1\212"+
    "\24\26\45\0\1\213\57\0\1\26\5\0\22\26\1\214"+
    "\6\26\7\0\1\215\23\0\1\26\5\0\5\26\1\216"+
    "\23\26\33\0\1\26\5\0\15\26\1\217\13\26\56\0"+
    "\1\220\46\0\1\26\5\0\25\26\1\221\3\26\33\0"+
    "\1\26\5\0\10\26\1\222\20\26\6\0\1\223\24\0"+
    "\1\26\5\0\23\26\1\224\5\26\64\0\1\225\40\0"+
    "\1\26\5\0\24\26\1\226\4\26\33\0\1\26\5\0"+
    "\4\26\1\227\24\26\65\0\1\230\37\0\1\26\5\0"+
    "\16\26\1\231\12\26\33\0\1\26\5\0\3\26\1\232"+
    "\25\26\44\0\1\233\60\0\1\26\5\0\13\26\1\234"+
    "\15\26\54\0\1\235\66\0\1\223\26\0\1\223\13\0"+
    "\1\57\60\0\14\62\1\175\4\62\1\0\50\62\22\0"+
    "\1\26\5\0\12\26\1\236\16\26\10\0\1\237\22\0"+
    "\1\26\5\0\16\26\1\240\12\26\57\0\1\241\45\0"+
    "\1\26\5\0\24\26\1\242\4\26\33\0\1\26\5\0"+
    "\15\26\1\243\13\26\56\0\1\244\46\0\1\26\5\0"+
    "\13\26\1\245\15\26\33\0\1\26\5\0\4\26\1\246"+
    "\24\26\45\0\1\247\57\0\1\26\5\0\10\26\1\250"+
    "\20\26\6\0\1\251\24\0\1\26\5\0\1\252\30\26"+
    "\33\0\1\26\5\0\15\26\1\253\13\26\56\0\1\254"+
    "\46\0\1\26\5\0\2\26\1\255\26\26\43\0\1\256"+
    "\61\0\1\26\5\0\13\26\1\257\15\26\54\0\1\260"+
    "\50\0\1\26\5\0\21\26\1\261\7\26\33\0\1\26"+
    "\5\0\4\26\1\262\24\26\45\0\1\263\57\0\1\26"+
    "\5\0\13\26\1\264\15\26\54\0\1\265\50\0\1\26"+
    "\5\0\13\26\1\266\15\26\33\0\1\26\5\0\10\26"+
    "\1\267\20\26\6\0\1\270\42\0\1\270\26\0\1\270"+
    "\24\0\1\26\5\0\4\26\1\271\24\26\33\0\1\26"+
    "\5\0\2\26\1\272\26\26\43\0\1\273\61\0\1\26"+
    "\5\0\13\26\1\274\15\26\33\0\1\26\5\0\6\26"+
    "\1\275\22\26\47\0\1\276\55\0\1\26\5\0\7\26"+
    "\1\277\21\26\50\0\1\300\54\0\1\26\5\0\16\26"+
    "\1\301\12\26\57\0\1\302\45\0\1\26\5\0\4\26"+
    "\1\303\24\26\33\0\1\26\5\0\4\26\1\304\24\26"+
    "\45\0\1\305\57\0\1\26\5\0\23\26\1\306\5\26"+
    "\33\0\1\26\5\0\21\26\1\307\7\26\62\0\1\310"+
    "\42\0\1\26\5\0\1\311\30\26\41\0\1\312\63\0"+
    "\1\26\5\0\16\26\1\313\12\26\33\0\1\26\5\0"+
    "\27\26\1\314\1\315\70\0\1\316\1\317\33\0\1\26"+
    "\5\0\22\26\1\320\6\26\7\0\1\321\21\0\1\322"+
    "\1\0\1\26\5\0\31\26\31\0\1\322\73\0\1\26"+
    "\5\0\6\26\1\323\22\26\47\0\1\324\55\0\1\26"+
    "\5\0\1\26\1\325\15\26\1\326\11\26\42\0\1\327"+
    "\15\0\1\330\44\0\1\26\5\0\21\26\1\331\7\26"+
    "\67\0\1\332\35\0\1\26\5\0\13\26\1\333\15\26"+
    "\54\0\1\334\50\0\1\26\5\0\1\335\30\26\33\0"+
    "\1\26\5\0\10\26\1\336\20\26\6\0\1\337\32\0"+
    "\1\340\101\0\1\337\26\0\1\337\53\0\1\341\42\0"+
    "\1\26\5\0\16\26\1\342\12\26\57\0\1\343\45\0"+
    "\1\26\5\0\21\26\1\344\7\26\33\0\1\26\5\0"+
    "\4\26\1\345\24\26\45\0\1\346\106\0\1\347\60\0"+
    "\1\350\26\0\1\350\24\0\1\26\5\0\1\26\1\351"+
    "\27\26\42\0\1\352\62\0\1\26\5\0\21\26\1\353"+
    "\7\26\62\0\1\354\73\0\1\355\40\0\1\26\5\0"+
    "\1\356\30\26\41\0\1\357\63\0\1\26\5\0\1\360"+
    "\30\26\41\0\1\361\75\0\1\362\57\0\1\26\5\0"+
    "\13\26\1\363\15\26\54\0\1\364\50\0\1\26\5\0"+
    "\22\26\1\365\6\26\7\0\1\366\53\0\1\366\15\0"+
    "\1\366\23\0\1\26\5\0\4\26\1\367\24\26\45\0"+
    "\1\370\57\0\1\26\5\0\22\26\1\371\6\26\7\0"+
    "\1\372\53\0\1\372\15\0\1\372\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10498];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\3\11\1\1\2\11"+
    "\2\1\2\11\21\1\3\11\1\1\1\11\2\1\1\11"+
    "\2\0\1\11\2\0\1\11\3\0\3\11\24\1\1\0"+
    "\3\1\2\11\3\0\1\11\2\1\2\0\1\11\4\1"+
    "\1\0\6\1\1\0\5\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\11\3\0\3\1"+
    "\1\11\2\1\1\0\2\1\1\0\3\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\11\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\11\4\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\2\11\1\1\1\11\1\0\1\1\1\0\2\1\2\0"+
    "\1\1\1\0\1\1\1\0\2\1\3\0\1\1\1\0"+
    "\2\1\1\11\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //---> Codigo de usuario en sintaxis java
   // public static LinkedList<TError> TablaEL = new LinkedList<TError>();
   // public static LinkedList<Tokens> tabla_tokens = new LinkedList<Tokens>();
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.println("se completo el analisis");
    //System.out.println(TablaEL.toString());
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { funcionesJava.SPERR.ERRSPtokens.add(new funcionesJava.SPERR(yytext(),"Error Lexico",yyline,yycolumn));   System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 63: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 64: break;
          case 3:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"NOT",yyline,yycolumn));return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 4:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"SIMBOLO_DOLAR",yyline,yycolumn));return new Symbol(sym.SIMBOLO_DOLAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 5:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"OPEN_PAR",yyline,yycolumn)); return new Symbol(sym.OPEN_PAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 6:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"CLOSE_PAR",yyline,yycolumn));  return new Symbol(sym.CLOSE_PAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 7:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MULTIPLICACION",yyline,yycolumn));return new Symbol(sym.MULTIPLICACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 8:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MAS",yyline,yycolumn));return new Symbol(sym.MAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 9:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"COMA",yyline,yycolumn));return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 10:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MENOS",yyline,yycolumn));return new Symbol(sym.MENOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 11:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"DIVICION",yyline,yycolumn));return new Symbol(sym.DIVICION, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 12:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"NUMERO",yyline,yycolumn));return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 13:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"DOSPUNTOS",yyline,yycolumn));return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 14:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"PUNTO_COMA",yyline,yycolumn));return new Symbol(sym.PUNTO_COMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 15:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MENOR",yyline,yycolumn));return new Symbol(sym.MENOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 16:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"IGUAL",yyline,yycolumn));return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 17:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MAYOR",yyline,yycolumn));return new Symbol(sym.MAYOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 18:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"ID",yyline,yycolumn));return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 19:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"CORCHETE_ABRE",yyline,yycolumn));return new Symbol(sym.CORCHETE_ABRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 20:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"CORCHETE_CIERRA",yyline,yycolumn));return new Symbol(sym.CORCHETE_CIERRA, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 21:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"COMA",yyline,yycolumn));return new Symbol(sym.LLAVE_ABRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 22:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"COMA",yyline,yycolumn));return new Symbol(sym.LLAVE_CIERRA, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 23:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"DIFERENTE",yyline,yycolumn));return new Symbol(sym.DIFERENTE, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 24:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"AND",yyline,yycolumn));return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 25:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RELACIONAL_MAS",yyline,yycolumn));return new Symbol(sym.RELACIONAL_MAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 26:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MENOR_IGUAL",yyline,yycolumn)); new Symbol(sym.MENOR_IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 27:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RELACIONAL_IGUAL",yyline,yycolumn));return new Symbol(sym.RELACIONAL_IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 28:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"MAYOR_IGUAL",yyline,yycolumn));return new Symbol(sym.MAYOR_IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 29:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_DO",yyline,yycolumn));return new Symbol(sym.RECERVADA_DO, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 30:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_IF",yyline,yycolumn));return new Symbol(sym.RECERVADA_IF, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 31:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"OR",yyline,yycolumn));return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 32:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"STRCADENA",yyline,yycolumn));return new Symbol(sym.STRCADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 33:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"CARACTER",yyline,yycolumn));return new Symbol(sym.CARACTER, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 34:
            { 
            }
          // fall through
          case 96: break;
          case 35:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"DIGITO",yyline,yycolumn));return new Symbol(sym.DIGITO, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 36:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_FOR",yyline,yycolumn));return new Symbol(sym.RECERVADA_FOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 37:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_INT",yyline,yycolumn));return new Symbol(sym.RECERVADA_INT, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 38:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_VAR",yyline,yycolumn));return new Symbol(sym.RECERVADA_VAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 39:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_BOOL",yyline,yycolumn));return new Symbol(sym.RECERVADA_BOOL, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 40:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_CASE",yyline,yycolumn));return new Symbol(sym.RECERVADA_CASE, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 41:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_CHAR",yyline,yycolumn));return new Symbol(sym.RECERVADA_CHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 42:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_EJEX",yyline,yycolumn));return new Symbol(sym.RECERVADA_EJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 43:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_ELSE",yyline,yycolumn));return new Symbol(sym.RECERVADA_ELSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 44:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_MAIN",yyline,yycolumn));return new Symbol(sym.RECERVADA_MAIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 45:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_TRUE",yyline,yycolumn));return new Symbol(sym.RECERVADA_TRUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 46:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_VOID",yyline,yycolumn));return new Symbol(sym.RECERVADA_VOID, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 47:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_BREAK",yyline,yycolumn));return new Symbol(sym.RECERVADA_BREAK, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 48:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_FALSE",yyline,yycolumn));return new Symbol(sym.RECERVADA_FALSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 49:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_WHILE",yyline,yycolumn));return new Symbol(sym.RECERVADA_WHILE, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 50:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_DOUBLE",yyline,yycolumn));return new Symbol(sym.RECERVADA_DOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 51:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_STRING",yyline,yycolumn));return new Symbol(sym.RECERVADA_STRING, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 52:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_SWITCH",yyline,yycolumn));return new Symbol(sym.RECERVADA_SWITCH, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 53:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_TITULO",yyline,yycolumn));return new Symbol(sym.RECERVADA_TITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 54:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_DEFAULT",yyline,yycolumn));return new Symbol(sym.RECERVADA_DEFAULT, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          case 55:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_TITULOX",yyline,yycolumn)); return new Symbol(sym.RECERVADA_TITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 117: break;
          case 56:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_TITULOY",yyline,yycolumn)); return new Symbol(sym.RECERVADA_TITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 118: break;
          case 57:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_VAL",yyline,yycolumn));return new Symbol(sym.RECERVADA_VAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 119: break;
          case 58:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_NEWVALOR",yyline,yycolumn));return new Symbol(sym.RECERVADA_NEWVALOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 120: break;
          case 59:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_PIES",yyline,yycolumn)); return new Symbol(sym.RECERVADA_PIES, yycolumn, yyline, yytext());
            }
          // fall through
          case 121: break;
          case 60:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_CONSOL",yyline,yycolumn));return new Symbol(sym.RECERVADA_CONSOL, yycolumn, yyline, yytext());
            }
          // fall through
          case 122: break;
          case 61:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_BAR",yyline,yycolumn)); return new Symbol(sym.RECERVADA_BAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 123: break;
          case 62:
            { funcionesJava.SPTK.TokensSP.add(new funcionesJava.SPTK(yytext(),"RECERVADA_GLOBAL",yyline,yycolumn));return new Symbol(sym.RECERVADA_GLOBAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
